// falta trocar 'w' p 's' e 's' p 'd'; falta ajeitar mudan칞a de dire칞칚o, inclusive p estados PRESO; consertar estado SOBE_2

// C칩digo teste com LEDs e sensor ultrass칪nico HC-SR04

#include <Arduino.h>

// Pinos dos motores (LEDs simulando motores)
#define MOTOR_CIMA   14
#define MOTOR_MOLA   27
#define MOTOR_BAIXO  26

// Pinos do ultrass칪nico (n칚o usado no Wokwi, mas mantido)
#define TRIG_PIN 32
#define ECHO_PIN 33

// Estados poss칤veis
typedef enum {
  ESTADO_RELAXADO,
  PRESO_DISTENDIDO,
  SOBE_1,
  DESCE_1,
  PRESO_CONTRAIDO,
  SOBE_2,
  DESCE_2
} Estado;

// Estado atual
Estado estado = PRESO_DISTENDIDO; // come칞a j치 no PRESO_DISTENDIDO

// Controle do ciclo
bool cicloSubida = false;
bool cicloDescida = false;

// Fun칞칚o para imprimir nome do estado
const char* nomeEstado(Estado e) {
  switch (e) {
    case ESTADO_RELAXADO: return "RELAXADO";
    case PRESO_DISTENDIDO: return "PRESO_DISTENDIDO";
    case SOBE_1: return "SOBE_1";
    case DESCE_1: return "DESCE_1";
    case PRESO_CONTRAIDO: return "PRESO_CONTRAIDO";
    case SOBE_2: return "SOBE_2";
    case DESCE_2: return "DESCE_2";
    default: return "DESCONHECIDO";
  }
}

// Atualiza sa칤das dos motores conforme estado
void aplicaEstado(Estado e) {
  switch (e) {
    case ESTADO_RELAXADO:
      digitalWrite(MOTOR_CIMA, LOW);
      digitalWrite(MOTOR_MOLA, LOW);
      digitalWrite(MOTOR_BAIXO, LOW);
      break;

    case PRESO_DISTENDIDO:
      digitalWrite(MOTOR_CIMA, HIGH);
      digitalWrite(MOTOR_MOLA, LOW);
      digitalWrite(MOTOR_BAIXO, HIGH);
      break;

    case SOBE_1:
      digitalWrite(MOTOR_CIMA, HIGH);
      digitalWrite(MOTOR_MOLA, HIGH);
      digitalWrite(MOTOR_BAIXO, LOW);
      break;

    case DESCE_1:
      digitalWrite(MOTOR_CIMA, LOW);
      digitalWrite(MOTOR_MOLA, HIGH);
      digitalWrite(MOTOR_BAIXO, HIGH);
      break;

    case PRESO_CONTRAIDO:
      digitalWrite(MOTOR_CIMA, HIGH);
      digitalWrite(MOTOR_MOLA, HIGH);
      digitalWrite(MOTOR_BAIXO, HIGH);
      break;

    case SOBE_2:
      digitalWrite(MOTOR_CIMA, LOW);
      digitalWrite(MOTOR_MOLA, HIGH);
      digitalWrite(MOTOR_BAIXO, HIGH);
      break;

    case DESCE_2:
      digitalWrite(MOTOR_CIMA, HIGH);
      digitalWrite(MOTOR_MOLA, LOW);
      digitalWrite(MOTOR_BAIXO, LOW);
      break;
  }
  Serial.print("Novo estado: ");
  Serial.println(nomeEstado(e));
}

// L칩gica comum de pausa (bot칚o P ou sensor)
Estado pausaEstado(Estado e) {
  if (e == SOBE_1 || e == DESCE_1) return PRESO_CONTRAIDO;
  else if (e == SOBE_2 || e == DESCE_2) return PRESO_DISTENDIDO;
  else return e; // PRESO_CONTRAIDO ou PRESO_DISTENDIDO permanecem
}

// Mede a dist칙ncia do ultrass칪nico (em mm)
long medirDistancia() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  long duracao = pulseIn(ECHO_PIN, HIGH);
  long distancia = duracao * 0.343 / 2; // velocidade som ~0.343 mm/us
  return distancia; // em mm
}

void setup() {
  Serial.begin(115200);

  pinMode(MOTOR_CIMA, OUTPUT);
  pinMode(MOTOR_MOLA, OUTPUT);
  pinMode(MOTOR_BAIXO, OUTPUT);

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  aplicaEstado(estado); // inicia no PRESO_DISTENDIDO
  Serial.println("Digite 'w' para subir, 's' para descer, 'p' para pausar, 'a' para abortar");
}

void loop() {
  // 游댳 Verifica sensor ultrass칪nico (se dist칙ncia <= 400 mm)
  long distancia = medirDistancia();
  if (distancia > 0 && distancia <= 400) {
    Estado novo = pausaEstado(estado);
    if (novo != estado) {   // s칩 muda se for diferente
      estado = novo;
      cicloSubida = false;
      cicloDescida = false;
      aplicaEstado(estado);
    }
  }

  // 游댳 Leitura de comandos do Serial
  if (Serial.available() > 0) {
    char comando = Serial.read();

    if (comando == 'w') {
      cicloSubida = true;
      cicloDescida = false;
    }
    else if (comando == 's') {
      cicloSubida = false;
      cicloDescida = true;
    }
    else if (comando == 'p') {
      estado = pausaEstado(estado);
      cicloSubida = false;
      cicloDescida = false;
      aplicaEstado(estado);
    }
    else if (comando == 'a') {
      // Primeiro aplica a pausa normal
      estado = pausaEstado(estado);
      aplicaEstado(estado);

      // Depois for칞a relaxado
      delay(2000); // transi칞칚o suave
      estado = ESTADO_RELAXADO;
      cicloSubida = false;
      cicloDescida = false;
      aplicaEstado(estado);
    }
  }

  // 游댳 Avan칞o autom치tico do ciclo com delay(2000)
  if (cicloSubida) {
    delay(2000);
    if (estado == PRESO_DISTENDIDO) estado = SOBE_1;
    else if (estado == SOBE_1) estado = PRESO_CONTRAIDO;
    else if (estado == PRESO_CONTRAIDO) estado = SOBE_2;
    else if (estado == SOBE_2) estado = PRESO_DISTENDIDO;
    aplicaEstado(estado);
  }

  if (cicloDescida) {
    delay(2000);
    if (estado == PRESO_DISTENDIDO) estado = DESCE_1;
    else if (estado == DESCE_1) estado = PRESO_CONTRAIDO;
    else if (estado == PRESO_CONTRAIDO) estado = DESCE_2;
    else if (estado == DESCE_2) estado = PRESO_DISTENDIDO;
    aplicaEstado(estado);
  }
}

